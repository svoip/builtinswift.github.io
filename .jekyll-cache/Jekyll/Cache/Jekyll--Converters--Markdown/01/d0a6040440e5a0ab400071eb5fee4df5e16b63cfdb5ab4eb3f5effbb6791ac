I"Î1<p>If <code class="language-plaintext highlighter-rouge">module</code>s contain the programming constructs we deal with every day, <code class="language-plaintext highlighter-rouge">namespace</code> references them for easy access (and to avoid <code class="language-plaintext highlighter-rouge">Use of undeclared type</code> errors), and <code class="language-plaintext highlighter-rouge">scope</code> enforces the order of referencing.</p>

<p>So in a nutshell, <code class="language-plaintext highlighter-rouge">module</code> is a container, <code class="language-plaintext highlighter-rouge">namespace</code> is a referencer, <code class="language-plaintext highlighter-rouge">scope</code> is an enforcer. That was easy, right?
Now in wider terms.</p>

<h3 id="namespace-module-and-scope">Namespace, module and scope</h3>

<p>An Xcode project has an implicit namespace, and it keeps constructs (in Apple terms, <code class="language-plaintext highlighter-rouge">member</code>s) we write in the form of a hashmap.
A construct can be anything from class, class property, method to structs and enums.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="c1">// hypothetically</span>
<span class="p">[</span><span class="nv">member1</span><span class="p">:</span> <span class="n">itsAddress</span><span class="p">,</span> <span class="nv">member2</span><span class="p">:</span> <span class="n">itsAddress</span><span class="p">]</span>
<span class="c1">// or in practice</span>
<span class="p">[</span><span class="kt">MyClass</span><span class="p">:</span><span class="n">itsAddress</span><span class="p">,</span> <span class="nv">myObj</span><span class="p">:</span><span class="n">itsAddress</span><span class="p">,</span> <span class="nv">varIjustCreated</span><span class="p">:</span><span class="n">itsAddress</span><span class="p">,</span> <span class="o">...</span><span class="p">]</span></code></pre></figure>

<p>So whenever we write</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">myObj</span><span class="p">:</span> <span class="kt">MyClass</span></code></pre></figure>

<p>compiler knows what we are talking about.</p>

<p>When we import a module into the project, this implicit namespace grows.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="c1">// suppose we have imported ModuleX</span>
<span class="p">[</span><span class="kt">MyClass</span><span class="p">:</span><span class="n">itsAddress</span><span class="p">,</span> <span class="nv">myObj</span><span class="p">:</span><span class="n">itsAddress</span><span class="p">,</span> <span class="nv">varIjustCreated</span><span class="p">:</span><span class="n">itsAddress</span><span class="p">,</span> 
<span class="kt">ModuleX</span><span class="o">.</span><span class="kt">ItsClass1</span><span class="p">:</span> <span class="n">itsAddress</span><span class="p">,</span> <span class="kt">ModuleX</span><span class="o">.</span><span class="nv">itsSomeGlobalConstant</span><span class="p">:</span> <span class="n">itsAddress</span><span class="p">,</span> <span class="o">...</span><span class="p">]</span></code></pre></figure>

<p>Where does the scope stand?</p>

<p>At any given context in our code, scope looks through the namespace and applies the innermost local namespace available. It works from bottom up as in this graph below.
<img src="/images/scope-arrow.png" alt="alert-controller" class="img-responsive" /></p>

<p>A concise example:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">myValue</span> <span class="o">=</span> <span class="mi">0</span>
<span class="kd">class</span> <span class="kt">MyClass</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">myValue</span> <span class="o">=</span> <span class="mi">5</span> 
  <span class="nf">init</span><span class="p">(){</span>
   <span class="nf">print</span><span class="p">(</span><span class="s">"myValue is: </span><span class="se">\(</span><span class="n">myValue</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">myObj</span> <span class="o">=</span> <span class="kt">MyClass</span><span class="p">()</span>
<span class="c1">// myValue is: 5</span></code></pre></figure>

<p><img src="/images/scope-colored.png" alt="alert-controller" class="img-responsive" /></p>

<p>How does Swift employ scope?</p>

<h3 id="scoping-in-swift">Scoping in Swift</h3>

<h4 id="1-optional-binding">1. Optional binding</h4>

<p>One of the principal features of Swift, optional binding, uses scope.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">var</span> <span class="nv">foo</span><span class="p">:</span><span class="kt">String</span><span class="p">?</span>
<span class="c1">// 'foo' is an Optional String</span>
<span class="k">if</span> <span class="k">let</span> <span class="nv">foo</span> <span class="o">=</span> <span class="n">foo</span> <span class="p">{</span>
  <span class="c1">// 'foo' is a String</span>
<span class="p">}</span>
<span class="c1">// 'foo' is an Optional String again</span></code></pre></figure>

<p>or similar example:</p>

<p><img src="/images/animal-scratch.png" alt="alert-controller" class="img-responsive" /></p>

<p>With <code class="language-plaintext highlighter-rouge">guard let</code> scope can be changed to assist readability:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">password</span><span class="p">:</span><span class="kt">UITextField</span>
<span class="c1">// 'password' is a UI control</span>
<span class="k">guard</span> <span class="k">let</span> <span class="nv">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">.</span><span class="n">text</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
<span class="c1">// now 'password' is its text value</span></code></pre></figure>

<h4 id="2-chaining">2. Chaining</h4>

<p>Something that Objective-C never allowed, Swift permits nested scopes, giving us an extra tool against naming collisions or for a better code organization.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">struct</span> <span class="kt">Foo</span> <span class="p">{</span>
  <span class="kd">struct</span> <span class="kt">Bar</span> <span class="p">{</span>
    <span class="kd">struct</span> <span class="kt">Baz</span> <span class="p">{</span>
    	<span class="c1">// </span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">baz</span> <span class="o">=</span> <span class="kt">Foo</span><span class="o">.</span><span class="kt">Bar</span><span class="o">.</span><span class="kt">Baz</span><span class="p">()</span></code></pre></figure>

<p>I like to use this technique as a configuration setting in my projects. While typing, Xcodeâ€™s code completion brings even more delight.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="c1">// use the recent token or device-id </span>
<span class="k">let</span> <span class="nv">token</span> <span class="o">=</span> <span class="kt">MyApp</span><span class="o">.</span><span class="kt">Defaults</span><span class="o">.</span><span class="kt">Token</span><span class="o">.</span><span class="kt">Get</span><span class="p">()</span>
<span class="k">let</span> <span class="nv">deviceId</span> <span class="o">=</span> <span class="kt">MyApp</span><span class="o">.</span><span class="kt">Defaults</span><span class="o">.</span><span class="kt">DeviceId</span><span class="o">.</span><span class="kt">Get</span><span class="p">()</span>

<span class="c1">// cache the next value</span>
<span class="k">let</span> <span class="nv">newToken</span> <span class="o">=</span> <span class="s">"my next token"</span>
<span class="kt">MyApp</span><span class="o">.</span><span class="kt">Defaults</span><span class="o">.</span><span class="kt">Token</span><span class="o">.</span><span class="kt">Set</span><span class="p">(</span><span class="n">newToken</span><span class="p">)</span>

<span class="c1">// fetch the correct color</span>
<span class="n">myLabel</span><span class="o">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="kt">MyApp</span><span class="o">.</span><span class="kt">Color</span><span class="o">.</span><span class="n">textColor</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="c1">// which is implemented as:</span>
<span class="kd">struct</span> <span class="kt">MyApp</span> <span class="p">{</span>
  <span class="kd">struct</span> <span class="kt">Defaults</span> <span class="p">{</span>

    <span class="kd">struct</span> <span class="kt">Token</span> <span class="p">{</span>
      <span class="kd">static</span> <span class="kd">func</span> <span class="kt">Get</span><span class="p">()</span><span class="o">-&gt;</span><span class="kt">String</span><span class="p">?{</span>
        <span class="k">return</span> <span class="o">...</span>
      <span class="p">}</span>
      <span class="kd">static</span> <span class="kd">func</span> <span class="kt">Set</span><span class="p">(</span><span class="n">_</span> <span class="nv">val</span><span class="p">:</span><span class="kt">String</span><span class="p">?){</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">val</span> <span class="o">=</span> <span class="n">val</span> <span class="p">{</span>
          <span class="c1">// save the new token in, for example, NSUserDefaults</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
         <span class="c1">// or remove the known token</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">struct</span> <span class="kt">DeviceId</span> <span class="p">{</span>
    	<span class="c1">//</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="kd">struct</span> <span class="kt">Color</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">titleColor</span> <span class="o">=</span> <span class="kt">UIColor</span><span class="o">.</span><span class="n">white</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">textColor</span> <span class="o">=</span> <span class="kt">UIColor</span><span class="o">.</span><span class="n">gray</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>(seems gone) give Firebaseâ€™s API as example</p>

<h4 id="3-strong-typing-mechanism">3. Strong-typing mechanism</h4>

<p>Many objects fetched from remote endpoints contain â€˜idâ€™ property, which typically is the unique identifier of that object. It can be <code class="language-plaintext highlighter-rouge">Int</code> or <code class="language-plaintext highlighter-rouge">String</code> depending on the circumstances. If it is an <code class="language-plaintext highlighter-rouge">Int</code>, can â€˜idâ€™s of two people be added? What would that even mean?</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">struct</span> <span class="kt">Person</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">id</span><span class="p">:</span><span class="kt">Int</span>
<span class="p">}</span></code></pre></figure>

<p>We can implement this as:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">struct</span> <span class="kt">Person</span> <span class="p">{</span>
  <span class="kd">struct</span> <span class="kt">ID</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">value</span><span class="p">:</span><span class="kt">Int</span>
  <span class="p">}</span>
  <span class="k">var</span> <span class="nv">id</span><span class="p">:</span><span class="kt">ID</span>
<span class="p">}</span></code></pre></figure>

<p>and we get a strongly-typed member, declared in the scope of the class itself.</p>

<p><img src="/images/person-id.png" alt="alert-controller" class="img-responsive" /></p>

:ET