I"g><p>How can we abstract <code class="language-plaintext highlighter-rouge">UIAlertController</code> and interaction with it with the help of value types? It is simpler than one might think.</p>

<p>First things first, let’s understand what this class represents from this diagram.</p>

<p><img src="/images/alertcontroller.png" alt="alert-controller" class="img-responsive" /></p>

<p><code class="language-plaintext highlighter-rouge">UIAlertController</code> has a title and a message which hold static values, the ones we pass at their creation. <code class="language-plaintext highlighter-rouge">UIAlertController</code> also contains a set of children that are there for user interaction. They support events and their values can change anytime. In this implementation we create a single interface for textfield and button types. We are going to pass them an input and expect an output from them. 
Since <code class="language-plaintext highlighter-rouge">actionSheet:UIAlertActionStyle</code> type doesn’t support textfields, we omit that and concentrate only on <code class="language-plaintext highlighter-rouge">alert:UIAlertActionStyle</code> types.</p>

<p><img src="/images/alertcontroller-highlighted.png" alt="alert-controller" class="img-responsive" /></p>

<p>Now to the abstraction. We can create a single type to define both the button and the textfield.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">enum</span> <span class="kt">AlertItemType</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nf">button</span><span class="p">(</span><span class="kt">String</span><span class="p">)</span> <span class="c1">// title for the given button</span>
    <span class="k">case</span> <span class="nf">textField</span><span class="p">(</span><span class="kt">String</span><span class="p">)</span> <span class="c1">// input text for the given textfield</span>
<span class="p">}</span></code></pre></figure>

<p>and place it inside a struct. We call this type <code class="language-plaintext highlighter-rouge">AlertItem</code>.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">struct</span> <span class="kt">AlertItem</span> <span class="p">{</span>
  <span class="kd">enum</span> <span class="kt">AlertItemType</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nf">button</span><span class="p">(</span><span class="kt">String</span><span class="p">)</span>
    <span class="k">case</span> <span class="nf">textField</span><span class="p">(</span><span class="kt">String</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="k">let</span> <span class="nv">type</span><span class="p">:</span><span class="kt">AlertItemType</span>
  <span class="k">let</span> <span class="nv">handler</span><span class="p">:(</span><span class="kt">String</span><span class="p">?)</span><span class="o">-&gt;</span><span class="kt">Void</span>
<span class="p">}</span></code></pre></figure>

<p>The whole alert view is then represented by this struct.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">struct</span> <span class="kt">Alert</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">title</span><span class="p">:</span><span class="kt">String</span>
  <span class="k">let</span> <span class="nv">message</span><span class="p">:</span><span class="kt">String</span>
  <span class="k">let</span> <span class="nv">items</span><span class="p">:[</span><span class="kt">AlertItem</span><span class="p">]</span>
<span class="p">}</span></code></pre></figure>

<p>Interesting thing is that we can pass both the button and textfield a <code class="language-plaintext highlighter-rouge">String</code> input and expect a <code class="language-plaintext highlighter-rouge">String</code> output. For button, this plays out as button’s title (input), and nil (output). For textfield, it is textfield’s text or placeholder (input), and the text generated by the user (output). Wait, but <code class="language-plaintext highlighter-rouge">UIAlertController</code> doesn’t provide a handler with a textfield like it does with a button.
We do that on our own, and abstract it through a “parser” object, which will in return call our handler at every character-change.</p>

<p><img src="/images/interaction.png" alt="alert-controller" class="img-responsive" /></p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">class</span> <span class="kt">Parser</span><span class="p">:</span><span class="kt">NSObject</span> <span class="p">{</span>
    <span class="c1">// keep reference to the textfields being presented to the user</span>
    <span class="kd">private</span> <span class="k">var</span> <span class="nv">textControls</span> <span class="o">=</span> <span class="p">[</span> <span class="kt">UITextField</span><span class="p">:</span> <span class="p">(</span><span class="kt">String</span><span class="p">?)</span><span class="o">-&gt;</span><span class="kt">Void</span> <span class="p">]()</span>
    
    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">evaluate</span><span class="p">(</span><span class="n">_</span> <span class="nv">alert</span><span class="p">:</span><span class="kt">Alert</span><span class="p">)</span><span class="o">-&gt;</span><span class="kt">UIAlertController</span><span class="p">{</span>
        <span class="c1">// generate UIAlertController instance from the configuration object</span>
        <span class="k">let</span> <span class="nv">controller</span> <span class="o">=</span> <span class="kt">UIAlertController</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="n">alert</span><span class="o">.</span><span class="n">title</span><span class="p">,</span> <span class="nv">message</span><span class="p">:</span> <span class="n">alert</span><span class="o">.</span><span class="n">message</span><span class="p">,</span> <span class="nv">preferredStyle</span><span class="p">:</span> <span class="o">.</span><span class="n">alert</span><span class="p">)</span>
        <span class="n">alert</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="nf">map</span><span class="p">({</span> <span class="n">item</span> <span class="k">in</span>
            <span class="k">switch</span> <span class="n">item</span><span class="o">.</span><span class="n">type</span> <span class="p">{</span>
            <span class="k">case</span> <span class="o">.</span><span class="nf">button</span><span class="p">(</span><span class="k">let</span> <span class="nv">input</span><span class="p">):</span>
                <span class="k">let</span> <span class="nv">action</span> <span class="o">=</span> <span class="kt">UIAlertAction</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="n">input</span><span class="p">,</span> <span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">,</span> <span class="nv">handler</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="nv">action</span><span class="p">:</span><span class="kt">UIAlertAction</span><span class="p">)</span> <span class="k">in</span>
                    <span class="n">item</span><span class="o">.</span><span class="nf">handler</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span>
                <span class="p">})</span>
                <span class="n">controller</span><span class="o">.</span><span class="nf">addAction</span><span class="p">(</span><span class="n">action</span><span class="p">)</span>
                
            <span class="k">case</span> <span class="o">.</span><span class="nf">textField</span><span class="p">(</span><span class="k">let</span> <span class="nv">input</span><span class="p">):</span>
                <span class="n">controller</span><span class="o">.</span><span class="n">addTextField</span> <span class="p">{</span> <span class="p">(</span><span class="nv">textField</span><span class="p">:</span> <span class="kt">UITextField</span><span class="o">!</span><span class="p">)</span> <span class="k">in</span>
                    <span class="n">textField</span><span class="o">.</span><span class="n">placeholder</span> <span class="o">=</span> <span class="n">input</span>
                    <span class="c1">// observe user-typing event</span>
                    <span class="n">textField</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="kd">#selector(</span><span class="nf">self.textFieldDidChange(_:)</span><span class="kd">)</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">editingChanged</span><span class="p">)</span>
                    <span class="c1">// keep reference to the textfield and its handler to invoke later</span>
                    <span class="k">self</span><span class="o">.</span><span class="n">textControls</span><span class="p">[</span><span class="n">textField</span><span class="p">]</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="n">handler</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">})</span>
        <span class="c1">// ready to be presented on-screen</span>
        <span class="k">return</span> <span class="n">controller</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">textFieldDidChange</span><span class="p">(</span><span class="n">_</span> <span class="nv">textField</span><span class="p">:</span> <span class="kt">UITextField</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// get the correct handler, and invoke</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">handler</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">textControls</span>
            <span class="o">.</span><span class="nf">filter</span><span class="p">({</span> <span class="n">key</span><span class="p">,</span> <span class="n">_</span> <span class="k">in</span> <span class="n">textField</span> <span class="o">==</span> <span class="n">key</span><span class="p">})</span>
            <span class="o">.</span><span class="nf">map</span><span class="p">(</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">value</span> <span class="k">in</span> <span class="n">value</span> <span class="p">})</span>
            <span class="o">.</span><span class="n">first</span> <span class="p">{</span>
            <span class="nf">handler</span><span class="p">(</span><span class="n">textField</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>We can use it then like this:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">parser</span> <span class="o">=</span> <span class="kt">Parser</span><span class="p">()</span>
<span class="k">var</span> <span class="nv">username</span><span class="p">:</span><span class="kt">String</span><span class="p">?</span>
<span class="k">var</span> <span class="nv">password</span><span class="p">:</span><span class="kt">String</span><span class="p">?</span>
<span class="k">let</span> <span class="nv">usernameItem</span> <span class="o">=</span> <span class="kt">AlertItem</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="o">.</span><span class="nf">textField</span><span class="p">(</span><span class="s">"username"</span><span class="p">))</span> <span class="p">{</span> <span class="n">output</span> <span class="k">in</span>
    <span class="n">username</span> <span class="o">=</span> <span class="n">output</span>
<span class="p">}</span>
<span class="k">let</span> <span class="nv">passwordItem</span> <span class="o">=</span> <span class="kt">AlertItem</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="o">.</span><span class="nf">textField</span><span class="p">(</span><span class="s">"password"</span><span class="p">))</span> <span class="p">{</span> <span class="n">output</span> <span class="k">in</span>
    <span class="n">password</span> <span class="o">=</span> <span class="n">output</span>
<span class="p">}</span>
<span class="k">let</span> <span class="nv">okItem</span> <span class="o">=</span> <span class="kt">AlertItem</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="o">.</span><span class="nf">button</span><span class="p">(</span><span class="s">"Ok"</span><span class="p">))</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
    <span class="c1">// handle login </span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"values are: [</span><span class="se">\(</span><span class="n">username</span><span class="se">)</span><span class="s"> - </span><span class="se">\(</span><span class="n">password</span><span class="se">)</span><span class="s">]"</span><span class="p">)</span>
<span class="p">}</span>
<span class="k">let</span> <span class="nv">cancelItem</span> <span class="o">=</span> <span class="kt">AlertItem</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="o">.</span><span class="nf">button</span><span class="p">(</span><span class="s">"Cancel"</span><span class="p">))</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span> <span class="cm">/* cancelled */</span><span class="p">}</span>
<span class="k">let</span> <span class="nv">alert</span> <span class="o">=</span> <span class="kt">Alert</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"Welcome"</span><span class="p">,</span> <span class="nv">message</span><span class="p">:</span> <span class="s">"Please login"</span><span class="p">,</span> <span class="nv">items</span><span class="p">:</span> <span class="p">[</span><span class="n">usernameItem</span><span class="p">,</span> <span class="n">passwordItem</span><span class="p">,</span> <span class="n">okItem</span><span class="p">,</span> <span class="n">cancelItem</span><span class="p">])</span>
<span class="k">let</span> <span class="nv">alertController</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="nf">evaluate</span><span class="p">(</span><span class="n">alert</span><span class="p">)</span>
<span class="n">myViewController</span><span class="o">.</span><span class="nf">present</span><span class="p">(</span><span class="n">alertController</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span></code></pre></figure>

<p>It would appear on-screen like this:</p>

<p><img src="/images/login.png" alt="alert-controller" class="img-responsive" /></p>

<p>This simple implementation took 2 structs, 1 enums and 1 class in total. And since responsibilities are separated we can test them as well.</p>

<p>The complete code you can find <a href="https://github.com/rsardek/Alertview">here</a>.</p>

:ET